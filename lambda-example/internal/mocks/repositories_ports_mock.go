// Code generated by MockGen. DO NOT EDIT.
// Source: repositories_ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/fsosauala/lambda-example/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockCountriesRepositoryPort is a mock of CountriesRepositoryPort interface.
type MockCountriesRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockCountriesRepositoryPortMockRecorder
}

// MockCountriesRepositoryPortMockRecorder is the mock recorder for MockCountriesRepositoryPort.
type MockCountriesRepositoryPortMockRecorder struct {
	mock *MockCountriesRepositoryPort
}

// NewMockCountriesRepositoryPort creates a new mock instance.
func NewMockCountriesRepositoryPort(ctrl *gomock.Controller) *MockCountriesRepositoryPort {
	mock := &MockCountriesRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockCountriesRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountriesRepositoryPort) EXPECT() *MockCountriesRepositoryPortMockRecorder {
	return m.recorder
}

// CreateCountry mocks base method.
func (m *MockCountriesRepositoryPort) CreateCountry(ctx context.Context, country domain.Country) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", ctx, country)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCountry indicates an expected call of CreateCountry.
func (mr *MockCountriesRepositoryPortMockRecorder) CreateCountry(ctx, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockCountriesRepositoryPort)(nil).CreateCountry), ctx, country)
}
