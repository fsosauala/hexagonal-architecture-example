// Code generated by MockGen. DO NOT EDIT.
// Source: services_ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/fsosauala/microservice-example/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockCountriesServicePort is a mock of CountriesServicePort interface.
type MockCountriesServicePort struct {
	ctrl     *gomock.Controller
	recorder *MockCountriesServicePortMockRecorder
}

// MockCountriesServicePortMockRecorder is the mock recorder for MockCountriesServicePort.
type MockCountriesServicePortMockRecorder struct {
	mock *MockCountriesServicePort
}

// NewMockCountriesServicePort creates a new mock instance.
func NewMockCountriesServicePort(ctrl *gomock.Controller) *MockCountriesServicePort {
	mock := &MockCountriesServicePort{ctrl: ctrl}
	mock.recorder = &MockCountriesServicePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountriesServicePort) EXPECT() *MockCountriesServicePortMockRecorder {
	return m.recorder
}

// CreateCountry mocks base method.
func (m *MockCountriesServicePort) CreateCountry(ctx context.Context, request domain.CountryRequest) (domain.CountryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", ctx, request)
	ret0, _ := ret[0].(domain.CountryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCountry indicates an expected call of CreateCountry.
func (mr *MockCountriesServicePortMockRecorder) CreateCountry(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockCountriesServicePort)(nil).CreateCountry), ctx, request)
}

// GetCountries mocks base method.
func (m *MockCountriesServicePort) GetCountries(ctx context.Context) (domain.GetCountriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountries", ctx)
	ret0, _ := ret[0].(domain.GetCountriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountries indicates an expected call of GetCountries.
func (mr *MockCountriesServicePortMockRecorder) GetCountries(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountries", reflect.TypeOf((*MockCountriesServicePort)(nil).GetCountries), ctx)
}
